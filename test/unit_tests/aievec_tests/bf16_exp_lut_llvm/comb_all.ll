; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p:20:32-i1:8:32-i8:8:32-i16:16:32-i32:32:32-f32:32:32-i64:32-f64:32-a:0:32-n32"
target triple = "aie2"

%class.bfloat16 = type { bfloat }

@exp_ilut_ab = dso_local global [512 x i16] [i16 16256, i16 16430, i16 16620, i16 16801, i16 16986, i16 17172, i16 17354, i16 17545, i16 16256, i16 16430, i16 16620, i16 16801, i16 16986, i16 17172, i16 17354, i16 17545, i16 17722, i16 17917, i16 18092, i16 18282, i16 18463, i16 18648, i16 18835, i16 19016, i16 17722, i16 17917, i16 18092, i16 18282, i16 18463, i16 18648, i16 18835, i16 19016, i16 19208, i16 19384, i16 19578, i16 19754, i16 19943, i16 20125, i16 20310, i16 20497, i16 19208, i16 19384, i16 19578, i16 19754, i16 19943, i16 20125, i16 20310, i16 20497, i16 20677, i16 20870, i16 21046, i16 21240, i16 21416, i16 21605, i16 21788, i16 21971, i16 20677, i16 20870, i16 21046, i16 21240, i16 21416, i16 21605, i16 21788, i16 21971, i16 22160, i16 22339, i16 22533, i16 22708, i16 22901, i16 23079, i16 23266, i16 23450, i16 22160, i16 22339, i16 22533, i16 22708, i16 22901, i16 23079, i16 23266, i16 23450, i16 23633, i16 23822, i16 24001, i16 24195, i16 24370, i16 24562, i16 24741, i16 24928, i16 23633, i16 23822, i16 24001, i16 24195, i16 24370, i16 24562, i16 24741, i16 24928, i16 25112, i16 25295, i16 25485, i16 25663, i16 25858, i16 26032, i16 26224, i16 26403, i16 25112, i16 25295, i16 25485, i16 25663, i16 25858, i16 26032, i16 26224, i16 26403, i16 26589, i16 26774, i16 26957, i16 27147, i16 27325, i16 27520, i16 27695, i16 27885, i16 26589, i16 26774, i16 26957, i16 27147, i16 27325, i16 27520, i16 27695, i16 27885, i16 28065, i16 28251, i16 28437, i16 28618, i16 28809, i16 28987, i16 29182, i16 29357, i16 28065, i16 28251, i16 28437, i16 28618, i16 28809, i16 28987, i16 29182, i16 29357, i16 29547, i16 29727, i16 29913, i16 30099, i16 30280, i16 30472, i16 30649, i16 30843, i16 29547, i16 29727, i16 29913, i16 30099, i16 30280, i16 30472, i16 30649, i16 30843, i16 31019, i16 31208, i16 31390, i16 31574, i16 31762, i16 31942, i16 32135, i16 32311, i16 31019, i16 31208, i16 31390, i16 31574, i16 31762, i16 31942, i16 32135, i16 32311, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 3, i16 9, i16 24, i16 0, i16 0, i16 0, i16 0, i16 1, i16 3, i16 9, i16 24, i16 66, i16 179, i16 372, i16 550, i16 737, i16 921, i16 1104, i16 1293, i16 66, i16 179, i16 372, i16 550, i16 737, i16 921, i16 1104, i16 1293, i16 1472, i16 1666, i16 1841, i16 2033, i16 2212, i16 2399, i16 2583, i16 2766, i16 1472, i16 1666, i16 1841, i16 2033, i16 2212, i16 2399, i16 2583, i16 2766, i16 2956, i16 3134, i16 3329, i16 3503, i16 3694, i16 3874, i16 4060, i16 4246, i16 2956, i16 3134, i16 3329, i16 3503, i16 3694, i16 3874, i16 4060, i16 4246, i16 4427, i16 4618, i16 4796, i16 4991, i16 5165, i16 5356, i16 5536, i16 5722, i16 4427, i16 4618, i16 4796, i16 4991, i16 5165, i16 5356, i16 5536, i16 5722, i16 5908, i16 6089, i16 6281, i16 6458, i16 6652, i16 6828, i16 7017, i16 7198, i16 5908, i16 6089, i16 6281, i16 6458, i16 6652, i16 6828, i16 7017, i16 7198, i16 7383, i16 7570, i16 7751, i16 7943, i16 8120, i16 8314, i16 8490, i16 8679, i16 7383, i16 7570, i16 7751, i16 7943, i16 8120, i16 8314, i16 8490, i16 8679, i16 8861, i16 9045, i16 9233, i16 9413, i16 9606, i16 9782, i16 9975, i16 10152, i16 8861, i16 9045, i16 9233, i16 9413, i16 9606, i16 9782, i16 9975, i16 10152, i16 10340, i16 10523, i16 10707, i16 10895, i16 11075, i16 11268, i16 11444, i16 11636, i16 10340, i16 10523, i16 10707, i16 10895, i16 11075, i16 11268, i16 11444, i16 11636, i16 11814, i16 12002, i16 12185, i16 12368, i16 12558, i16 12737, i16 12931, i16 13106, i16 11814, i16 12002, i16 12185, i16 12368, i16 12558, i16 12737, i16 12931, i16 13106, i16 13298, i16 13476, i16 13663, i16 13848, i16 14030, i16 14220, i16 14398, i16 14593, i16 13298, i16 13476, i16 13663, i16 13848, i16 14030, i16 14220, i16 14398, i16 14593, i16 14768, i16 14959, i16 15138, i16 15325, i16 15510, i16 15692, i16 15883, i16 16060, i16 14768, i16 14959, i16 15138, i16 15325, i16 15510, i16 15692, i16 15883, i16 16060], align 32
@exp_ilut_cd = dso_local global [512 x i16] [i16 16256, i16 16430, i16 16620, i16 16801, i16 16986, i16 17172, i16 17354, i16 17545, i16 16256, i16 16430, i16 16620, i16 16801, i16 16986, i16 17172, i16 17354, i16 17545, i16 17722, i16 17917, i16 18092, i16 18282, i16 18463, i16 18648, i16 18835, i16 19016, i16 17722, i16 17917, i16 18092, i16 18282, i16 18463, i16 18648, i16 18835, i16 19016, i16 19208, i16 19384, i16 19578, i16 19754, i16 19943, i16 20125, i16 20310, i16 20497, i16 19208, i16 19384, i16 19578, i16 19754, i16 19943, i16 20125, i16 20310, i16 20497, i16 20677, i16 20870, i16 21046, i16 21240, i16 21416, i16 21605, i16 21788, i16 21971, i16 20677, i16 20870, i16 21046, i16 21240, i16 21416, i16 21605, i16 21788, i16 21971, i16 22160, i16 22339, i16 22533, i16 22708, i16 22901, i16 23079, i16 23266, i16 23450, i16 22160, i16 22339, i16 22533, i16 22708, i16 22901, i16 23079, i16 23266, i16 23450, i16 23633, i16 23822, i16 24001, i16 24195, i16 24370, i16 24562, i16 24741, i16 24928, i16 23633, i16 23822, i16 24001, i16 24195, i16 24370, i16 24562, i16 24741, i16 24928, i16 25112, i16 25295, i16 25485, i16 25663, i16 25858, i16 26032, i16 26224, i16 26403, i16 25112, i16 25295, i16 25485, i16 25663, i16 25858, i16 26032, i16 26224, i16 26403, i16 26589, i16 26774, i16 26957, i16 27147, i16 27325, i16 27520, i16 27695, i16 27885, i16 26589, i16 26774, i16 26957, i16 27147, i16 27325, i16 27520, i16 27695, i16 27885, i16 28065, i16 28251, i16 28437, i16 28618, i16 28809, i16 28987, i16 29182, i16 29357, i16 28065, i16 28251, i16 28437, i16 28618, i16 28809, i16 28987, i16 29182, i16 29357, i16 29547, i16 29727, i16 29913, i16 30099, i16 30280, i16 30472, i16 30649, i16 30843, i16 29547, i16 29727, i16 29913, i16 30099, i16 30280, i16 30472, i16 30649, i16 30843, i16 31019, i16 31208, i16 31390, i16 31574, i16 31762, i16 31942, i16 32135, i16 32311, i16 31019, i16 31208, i16 31390, i16 31574, i16 31762, i16 31942, i16 32135, i16 32311, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 32505, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 0, i16 1, i16 3, i16 9, i16 24, i16 0, i16 0, i16 0, i16 0, i16 1, i16 3, i16 9, i16 24, i16 66, i16 179, i16 372, i16 550, i16 737, i16 921, i16 1104, i16 1293, i16 66, i16 179, i16 372, i16 550, i16 737, i16 921, i16 1104, i16 1293, i16 1472, i16 1666, i16 1841, i16 2033, i16 2212, i16 2399, i16 2583, i16 2766, i16 1472, i16 1666, i16 1841, i16 2033, i16 2212, i16 2399, i16 2583, i16 2766, i16 2956, i16 3134, i16 3329, i16 3503, i16 3694, i16 3874, i16 4060, i16 4246, i16 2956, i16 3134, i16 3329, i16 3503, i16 3694, i16 3874, i16 4060, i16 4246, i16 4427, i16 4618, i16 4796, i16 4991, i16 5165, i16 5356, i16 5536, i16 5722, i16 4427, i16 4618, i16 4796, i16 4991, i16 5165, i16 5356, i16 5536, i16 5722, i16 5908, i16 6089, i16 6281, i16 6458, i16 6652, i16 6828, i16 7017, i16 7198, i16 5908, i16 6089, i16 6281, i16 6458, i16 6652, i16 6828, i16 7017, i16 7198, i16 7383, i16 7570, i16 7751, i16 7943, i16 8120, i16 8314, i16 8490, i16 8679, i16 7383, i16 7570, i16 7751, i16 7943, i16 8120, i16 8314, i16 8490, i16 8679, i16 8861, i16 9045, i16 9233, i16 9413, i16 9606, i16 9782, i16 9975, i16 10152, i16 8861, i16 9045, i16 9233, i16 9413, i16 9606, i16 9782, i16 9975, i16 10152, i16 10340, i16 10523, i16 10707, i16 10895, i16 11075, i16 11268, i16 11444, i16 11636, i16 10340, i16 10523, i16 10707, i16 10895, i16 11075, i16 11268, i16 11444, i16 11636, i16 11814, i16 12002, i16 12185, i16 12368, i16 12558, i16 12737, i16 12931, i16 13106, i16 11814, i16 12002, i16 12185, i16 12368, i16 12558, i16 12737, i16 12931, i16 13106, i16 13298, i16 13476, i16 13663, i16 13848, i16 14030, i16 14220, i16 14398, i16 14593, i16 13298, i16 13476, i16 13663, i16 13848, i16 14030, i16 14220, i16 14398, i16 14593, i16 14768, i16 14959, i16 15138, i16 15325, i16 15510, i16 15692, i16 15883, i16 16060, i16 14768, i16 14959, i16 15138, i16 15325, i16 15510, i16 15692, i16 15883, i16 16060], align 32
@exp_flut_ab = dso_local global [512 x i16] [i16 16256, i16 16257, i16 16257, i16 16258, i16 16258, i16 16259, i16 16259, i16 16260, i16 16256, i16 16257, i16 16257, i16 16258, i16 16258, i16 16259, i16 16259, i16 16260, i16 16260, i16 16261, i16 16261, i16 16262, i16 16262, i16 16263, i16 16263, i16 16264, i16 16260, i16 16261, i16 16261, i16 16262, i16 16262, i16 16263, i16 16263, i16 16264, i16 16264, i16 16265, i16 16265, i16 16266, i16 16266, i16 16267, i16 16267, i16 16268, i16 16264, i16 16265, i16 16265, i16 16266, i16 16266, i16 16267, i16 16267, i16 16268, i16 16269, i16 16269, i16 16270, i16 16270, i16 16271, i16 16271, i16 16272, i16 16272, i16 16269, i16 16269, i16 16270, i16 16270, i16 16271, i16 16271, i16 16272, i16 16272, i16 16273, i16 16274, i16 16274, i16 16275, i16 16275, i16 16276, i16 16276, i16 16277, i16 16273, i16 16274, i16 16274, i16 16275, i16 16275, i16 16276, i16 16276, i16 16277, i16 16278, i16 16278, i16 16279, i16 16279, i16 16280, i16 16281, i16 16281, i16 16282, i16 16278, i16 16278, i16 16279, i16 16279, i16 16280, i16 16281, i16 16281, i16 16282, i16 16282, i16 16283, i16 16284, i16 16284, i16 16285, i16 16285, i16 16286, i16 16287, i16 16282, i16 16283, i16 16284, i16 16284, i16 16285, i16 16285, i16 16286, i16 16287, i16 16287, i16 16288, i16 16289, i16 16289, i16 16290, i16 16290, i16 16291, i16 16292, i16 16287, i16 16288, i16 16289, i16 16289, i16 16290, i16 16290, i16 16291, i16 16292, i16 16292, i16 16293, i16 16294, i16 16294, i16 16295, i16 16296, i16 16296, i16 16297, i16 16292, i16 16293, i16 16294, i16 16294, i16 16295, i16 16296, i16 16296, i16 16297, i16 16298, i16 16298, i16 16299, i16 16300, i16 16300, i16 16301, i16 16302, i16 16302, i16 16298, i16 16298, i16 16299, i16 16300, i16 16300, i16 16301, i16 16302, i16 16302, i16 16303, i16 16304, i16 16304, i16 16305, i16 16306, i16 16306, i16 16307, i16 16308, i16 16303, i16 16304, i16 16304, i16 16305, i16 16306, i16 16306, i16 16307, i16 16308, i16 16309, i16 16309, i16 16310, i16 16311, i16 16311, i16 16312, i16 16313, i16 16314, i16 16309, i16 16309, i16 16310, i16 16311, i16 16311, i16 16312, i16 16313, i16 16314, i16 16314, i16 16315, i16 16316, i16 16316, i16 16317, i16 16318, i16 16319, i16 16319, i16 16314, i16 16315, i16 16316, i16 16316, i16 16317, i16 16318, i16 16319, i16 16319, i16 16320, i16 16321, i16 16322, i16 16322, i16 16323, i16 16324, i16 16325, i16 16325, i16 16320, i16 16321, i16 16322, i16 16322, i16 16323, i16 16324, i16 16325, i16 16325, i16 16326, i16 16327, i16 16328, i16 16329, i16 16329, i16 16330, i16 16331, i16 16332, i16 16326, i16 16327, i16 16328, i16 16329, i16 16329, i16 16330, i16 16331, i16 16332, i16 16333, i16 16333, i16 16334, i16 16335, i16 16336, i16 16337, i16 16337, i16 16338, i16 16333, i16 16333, i16 16334, i16 16335, i16 16336, i16 16337, i16 16337, i16 16338, i16 16339, i16 16340, i16 16341, i16 16342, i16 16342, i16 16343, i16 16344, i16 16345, i16 16339, i16 16340, i16 16341, i16 16342, i16 16342, i16 16343, i16 16344, i16 16345, i16 16346, i16 16347, i16 16347, i16 16348, i16 16349, i16 16350, i16 16351, i16 16352, i16 16346, i16 16347, i16 16347, i16 16348, i16 16349, i16 16350, i16 16351, i16 16352, i16 16353, i16 16354, i16 16354, i16 16355, i16 16356, i16 16357, i16 16358, i16 16359, i16 16353, i16 16354, i16 16354, i16 16355, i16 16356, i16 16357, i16 16358, i16 16359, i16 16360, i16 16361, i16 16362, i16 16363, i16 16363, i16 16364, i16 16365, i16 16366, i16 16360, i16 16361, i16 16362, i16 16363, i16 16363, i16 16364, i16 16365, i16 16366, i16 16367, i16 16368, i16 16369, i16 16370, i16 16371, i16 16372, i16 16373, i16 16374, i16 16367, i16 16368, i16 16369, i16 16370, i16 16371, i16 16372, i16 16373, i16 16374, i16 16375, i16 16376, i16 16377, i16 16378, i16 16379, i16 16380, i16 16381, i16 16382, i16 16375, i16 16376, i16 16377, i16 16378, i16 16379, i16 16380, i16 16381, i16 16382, i16 16383, i16 16384, i16 16384, i16 16385, i16 16385, i16 16386, i16 16386, i16 16387, i16 16383, i16 16384, i16 16384, i16 16385, i16 16385, i16 16386, i16 16386, i16 16387, i16 16387, i16 16388, i16 16388, i16 16389, i16 16389, i16 16390, i16 16390, i16 16391, i16 16387, i16 16388, i16 16388, i16 16389, i16 16389, i16 16390, i16 16390, i16 16391, i16 16391, i16 16392, i16 16393, i16 16393, i16 16394, i16 16394, i16 16395, i16 16395, i16 16391, i16 16392, i16 16393, i16 16393, i16 16394, i16 16394, i16 16395, i16 16395, i16 16396, i16 16396, i16 16397, i16 16397, i16 16398, i16 16399, i16 16399, i16 16400, i16 16396, i16 16396, i16 16397, i16 16397, i16 16398, i16 16399, i16 16399, i16 16400, i16 16400, i16 16401, i16 16401, i16 16402, i16 16402, i16 16403, i16 16404, i16 16404, i16 16400, i16 16401, i16 16401, i16 16402, i16 16402, i16 16403, i16 16404, i16 16404, i16 16405, i16 16405, i16 16406, i16 16407, i16 16407, i16 16408, i16 16408, i16 16409, i16 16405, i16 16405, i16 16406, i16 16407, i16 16407, i16 16408, i16 16408, i16 16409, i16 16410, i16 16410, i16 16411, i16 16411, i16 16412, i16 16413, i16 16413, i16 16414, i16 16410, i16 16410, i16 16411, i16 16411, i16 16412, i16 16413, i16 16413, i16 16414, i16 16414, i16 16415, i16 16416, i16 16416, i16 16417, i16 16418, i16 16418, i16 16419, i16 16414, i16 16415, i16 16416, i16 16416, i16 16417, i16 16418, i16 16418, i16 16419, i16 16419, i16 16420, i16 16421, i16 16421, i16 16422, i16 16423, i16 16423, i16 16424, i16 16419, i16 16420, i16 16421, i16 16421, i16 16422, i16 16423, i16 16423, i16 16424, i16 16425, i16 16425, i16 16426, i16 16427, i16 16427, i16 16428, i16 16429, i16 16429, i16 16425, i16 16425, i16 16426, i16 16427, i16 16427, i16 16428, i16 16429, i16 16429], align 32
@exp_flut_cd = dso_local global [512 x i16] [i16 16256, i16 16257, i16 16257, i16 16258, i16 16258, i16 16259, i16 16259, i16 16260, i16 16256, i16 16257, i16 16257, i16 16258, i16 16258, i16 16259, i16 16259, i16 16260, i16 16260, i16 16261, i16 16261, i16 16262, i16 16262, i16 16263, i16 16263, i16 16264, i16 16260, i16 16261, i16 16261, i16 16262, i16 16262, i16 16263, i16 16263, i16 16264, i16 16264, i16 16265, i16 16265, i16 16266, i16 16266, i16 16267, i16 16267, i16 16268, i16 16264, i16 16265, i16 16265, i16 16266, i16 16266, i16 16267, i16 16267, i16 16268, i16 16269, i16 16269, i16 16270, i16 16270, i16 16271, i16 16271, i16 16272, i16 16272, i16 16269, i16 16269, i16 16270, i16 16270, i16 16271, i16 16271, i16 16272, i16 16272, i16 16273, i16 16274, i16 16274, i16 16275, i16 16275, i16 16276, i16 16276, i16 16277, i16 16273, i16 16274, i16 16274, i16 16275, i16 16275, i16 16276, i16 16276, i16 16277, i16 16278, i16 16278, i16 16279, i16 16279, i16 16280, i16 16281, i16 16281, i16 16282, i16 16278, i16 16278, i16 16279, i16 16279, i16 16280, i16 16281, i16 16281, i16 16282, i16 16282, i16 16283, i16 16284, i16 16284, i16 16285, i16 16285, i16 16286, i16 16287, i16 16282, i16 16283, i16 16284, i16 16284, i16 16285, i16 16285, i16 16286, i16 16287, i16 16287, i16 16288, i16 16289, i16 16289, i16 16290, i16 16290, i16 16291, i16 16292, i16 16287, i16 16288, i16 16289, i16 16289, i16 16290, i16 16290, i16 16291, i16 16292, i16 16292, i16 16293, i16 16294, i16 16294, i16 16295, i16 16296, i16 16296, i16 16297, i16 16292, i16 16293, i16 16294, i16 16294, i16 16295, i16 16296, i16 16296, i16 16297, i16 16298, i16 16298, i16 16299, i16 16300, i16 16300, i16 16301, i16 16302, i16 16302, i16 16298, i16 16298, i16 16299, i16 16300, i16 16300, i16 16301, i16 16302, i16 16302, i16 16303, i16 16304, i16 16304, i16 16305, i16 16306, i16 16306, i16 16307, i16 16308, i16 16303, i16 16304, i16 16304, i16 16305, i16 16306, i16 16306, i16 16307, i16 16308, i16 16309, i16 16309, i16 16310, i16 16311, i16 16311, i16 16312, i16 16313, i16 16314, i16 16309, i16 16309, i16 16310, i16 16311, i16 16311, i16 16312, i16 16313, i16 16314, i16 16314, i16 16315, i16 16316, i16 16316, i16 16317, i16 16318, i16 16319, i16 16319, i16 16314, i16 16315, i16 16316, i16 16316, i16 16317, i16 16318, i16 16319, i16 16319, i16 16320, i16 16321, i16 16322, i16 16322, i16 16323, i16 16324, i16 16325, i16 16325, i16 16320, i16 16321, i16 16322, i16 16322, i16 16323, i16 16324, i16 16325, i16 16325, i16 16326, i16 16327, i16 16328, i16 16329, i16 16329, i16 16330, i16 16331, i16 16332, i16 16326, i16 16327, i16 16328, i16 16329, i16 16329, i16 16330, i16 16331, i16 16332, i16 16333, i16 16333, i16 16334, i16 16335, i16 16336, i16 16337, i16 16337, i16 16338, i16 16333, i16 16333, i16 16334, i16 16335, i16 16336, i16 16337, i16 16337, i16 16338, i16 16339, i16 16340, i16 16341, i16 16342, i16 16342, i16 16343, i16 16344, i16 16345, i16 16339, i16 16340, i16 16341, i16 16342, i16 16342, i16 16343, i16 16344, i16 16345, i16 16346, i16 16347, i16 16347, i16 16348, i16 16349, i16 16350, i16 16351, i16 16352, i16 16346, i16 16347, i16 16347, i16 16348, i16 16349, i16 16350, i16 16351, i16 16352, i16 16353, i16 16354, i16 16354, i16 16355, i16 16356, i16 16357, i16 16358, i16 16359, i16 16353, i16 16354, i16 16354, i16 16355, i16 16356, i16 16357, i16 16358, i16 16359, i16 16360, i16 16361, i16 16362, i16 16363, i16 16363, i16 16364, i16 16365, i16 16366, i16 16360, i16 16361, i16 16362, i16 16363, i16 16363, i16 16364, i16 16365, i16 16366, i16 16367, i16 16368, i16 16369, i16 16370, i16 16371, i16 16372, i16 16373, i16 16374, i16 16367, i16 16368, i16 16369, i16 16370, i16 16371, i16 16372, i16 16373, i16 16374, i16 16375, i16 16376, i16 16377, i16 16378, i16 16379, i16 16380, i16 16381, i16 16382, i16 16375, i16 16376, i16 16377, i16 16378, i16 16379, i16 16380, i16 16381, i16 16382, i16 16383, i16 16384, i16 16384, i16 16385, i16 16385, i16 16386, i16 16386, i16 16387, i16 16383, i16 16384, i16 16384, i16 16385, i16 16385, i16 16386, i16 16386, i16 16387, i16 16387, i16 16388, i16 16388, i16 16389, i16 16389, i16 16390, i16 16390, i16 16391, i16 16387, i16 16388, i16 16388, i16 16389, i16 16389, i16 16390, i16 16390, i16 16391, i16 16391, i16 16392, i16 16393, i16 16393, i16 16394, i16 16394, i16 16395, i16 16395, i16 16391, i16 16392, i16 16393, i16 16393, i16 16394, i16 16394, i16 16395, i16 16395, i16 16396, i16 16396, i16 16397, i16 16397, i16 16398, i16 16399, i16 16399, i16 16400, i16 16396, i16 16396, i16 16397, i16 16397, i16 16398, i16 16399, i16 16399, i16 16400, i16 16400, i16 16401, i16 16401, i16 16402, i16 16402, i16 16403, i16 16404, i16 16404, i16 16400, i16 16401, i16 16401, i16 16402, i16 16402, i16 16403, i16 16404, i16 16404, i16 16405, i16 16405, i16 16406, i16 16407, i16 16407, i16 16408, i16 16408, i16 16409, i16 16405, i16 16405, i16 16406, i16 16407, i16 16407, i16 16408, i16 16408, i16 16409, i16 16410, i16 16410, i16 16411, i16 16411, i16 16412, i16 16413, i16 16413, i16 16414, i16 16410, i16 16410, i16 16411, i16 16411, i16 16412, i16 16413, i16 16413, i16 16414, i16 16414, i16 16415, i16 16416, i16 16416, i16 16417, i16 16418, i16 16418, i16 16419, i16 16414, i16 16415, i16 16416, i16 16416, i16 16417, i16 16418, i16 16418, i16 16419, i16 16419, i16 16420, i16 16421, i16 16421, i16 16422, i16 16423, i16 16423, i16 16424, i16 16419, i16 16420, i16 16421, i16 16421, i16 16422, i16 16423, i16 16423, i16 16424, i16 16425, i16 16425, i16 16426, i16 16427, i16 16427, i16 16428, i16 16429, i16 16429, i16 16425, i16 16425, i16 16426, i16 16427, i16 16427, i16 16428, i16 16429, i16 16429], align 32
@m_inv_lut = dso_local local_unnamed_addr global [128 x i8] c"\00~|zxvusqomljhgedb`_]\\ZYXVUSRQONMLJIHGEDCBA@?=<;:9876543210/.-,,+*)('&%%$#\22!! \1F\1E\1E\1D\1C\1B\1B\1A\19\18\18\17\16\16\15\14\14\13\12\12\11\10\10\0F\0E\0E\0D\0D\0C\0B\0B\0A\0A\09\09\08\07\07\06\06\05\05\04\04\03\03\02\02\01\01", align 32
@tanh_lut_ab = dso_local local_unnamed_addr global [128 x float] [float 0.000000e+00, float -1.000000e+00, float 0x3F67400000000000, float 0xBFEFA00000000000, float 0.000000e+00, float -1.000000e+00, float 0x3F67400000000000, float 0xBFEFA00000000000, float 0x3F74E00000000000, float 0xBFEF600000000000, float 0x3F7EC00000000000, float 0xBFEF200000000000, float 0x3F74E00000000000, float 0xBFEF600000000000, float 0x3F7EC00000000000, float 0xBFEF200000000000, float 0x3F8A000000000000, float 0xBFEEA00000000000, float 0x3F95C00000000000, float 0xBFEDE00000000000, float 0x3F8A000000000000, float 0xBFEEA00000000000, float 0x3F95C00000000000, float 0xBFEDE00000000000, float 0x3FA2200000000000, float 0xBFECC00000000000, float 0x3FACE00000000000, float 0xBFEB400000000000, float 0x3FA2200000000000, float 0xBFECC00000000000, float 0x3FACE00000000000, float 0xBFEB400000000000, float 0x3FB7800000000000, float -7.812500e-01, float 0x3FC2A00000000000, float -6.875000e-01, float 0x3FB7800000000000, float -7.812500e-01, float 0x3FC2A00000000000, float -6.875000e-01, float 0x3FCD600000000000, float -5.625000e-01, float 0x3FD6400000000000, float 0xBFDAA00000000000, float 0x3FCD600000000000, float -5.625000e-01, float 0x3FD6400000000000, float 0xBFDAA00000000000, float 0x3FE0200000000000, float 0xBFD0A00000000000, float 0x3FE6200000000000, float 0xBFBEA00000000000, float 0x3FE0200000000000, float 0xBFD0A00000000000, float 0x3FE6200000000000, float 0xBFBEA00000000000, float 0x3FEBC00000000000, float 0xBF9F800000000000, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0xBF9F800000000000, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0x3F9F800000000000, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0x3F9F800000000000, float 0x3FE6200000000000, float 0x3FBEA00000000000, float 0x3FE0200000000000, float 0x3FD0A00000000000, float 0x3FE6200000000000, float 0x3FBEA00000000000, float 0x3FE0200000000000, float 0x3FD0A00000000000, float 0x3FD6400000000000, float 0x3FDAA00000000000, float 0x3FCD600000000000, float 5.625000e-01, float 0x3FD6400000000000, float 0x3FDAA00000000000, float 0x3FCD600000000000, float 5.625000e-01, float 0x3FC2A00000000000, float 6.875000e-01, float 0x3FB7800000000000, float 7.812500e-01, float 0x3FC2A00000000000, float 6.875000e-01, float 0x3FB7800000000000, float 7.812500e-01, float 0x3FACE00000000000, float 0x3FEB400000000000, float 0x3FA2200000000000, float 0x3FECC00000000000, float 0x3FACE00000000000, float 0x3FEB400000000000, float 0x3FA2200000000000, float 0x3FECC00000000000, float 0x3F95C00000000000, float 0x3FEDE00000000000, float 0x3F8A000000000000, float 0x3FEEA00000000000, float 0x3F95C00000000000, float 0x3FEDE00000000000, float 0x3F8A000000000000, float 0x3FEEA00000000000, float 0x3F7EC00000000000, float 0x3FEF200000000000, float 0x3F74E00000000000, float 0x3FEF600000000000, float 0x3F7EC00000000000, float 0x3FEF200000000000, float 0x3F74E00000000000, float 0x3FEF600000000000, float 0x3F67400000000000, float 0x3FEFA00000000000, float 0.000000e+00, float 1.000000e+00, float 0x3F67400000000000, float 0x3FEFA00000000000, float 0.000000e+00, float 1.000000e+00], align 4
@tanh_lut_cd = dso_local local_unnamed_addr global [128 x float] [float 0.000000e+00, float -1.000000e+00, float 0x3F67400000000000, float 0xBFEFA00000000000, float 0.000000e+00, float -1.000000e+00, float 0x3F67400000000000, float 0xBFEFA00000000000, float 0x3F74E00000000000, float 0xBFEF600000000000, float 0x3F7EC00000000000, float 0xBFEF200000000000, float 0x3F74E00000000000, float 0xBFEF600000000000, float 0x3F7EC00000000000, float 0xBFEF200000000000, float 0x3F8A000000000000, float 0xBFEEA00000000000, float 0x3F95C00000000000, float 0xBFEDE00000000000, float 0x3F8A000000000000, float 0xBFEEA00000000000, float 0x3F95C00000000000, float 0xBFEDE00000000000, float 0x3FA2200000000000, float 0xBFECC00000000000, float 0x3FACE00000000000, float 0xBFEB400000000000, float 0x3FA2200000000000, float 0xBFECC00000000000, float 0x3FACE00000000000, float 0xBFEB400000000000, float 0x3FB7800000000000, float -7.812500e-01, float 0x3FC2A00000000000, float -6.875000e-01, float 0x3FB7800000000000, float -7.812500e-01, float 0x3FC2A00000000000, float -6.875000e-01, float 0x3FCD600000000000, float -5.625000e-01, float 0x3FD6400000000000, float 0xBFDAA00000000000, float 0x3FCD600000000000, float -5.625000e-01, float 0x3FD6400000000000, float 0xBFDAA00000000000, float 0x3FE0200000000000, float 0xBFD0A00000000000, float 0x3FE6200000000000, float 0xBFBEA00000000000, float 0x3FE0200000000000, float 0xBFD0A00000000000, float 0x3FE6200000000000, float 0xBFBEA00000000000, float 0x3FEBC00000000000, float 0xBF9F800000000000, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0xBF9F800000000000, float 1.000000e+00, float 0.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0x3F9F800000000000, float 1.000000e+00, float 0.000000e+00, float 0x3FEBC00000000000, float 0x3F9F800000000000, float 0x3FE6200000000000, float 0x3FBEA00000000000, float 0x3FE0200000000000, float 0x3FD0A00000000000, float 0x3FE6200000000000, float 0x3FBEA00000000000, float 0x3FE0200000000000, float 0x3FD0A00000000000, float 0x3FD6400000000000, float 0x3FDAA00000000000, float 0x3FCD600000000000, float 5.625000e-01, float 0x3FD6400000000000, float 0x3FDAA00000000000, float 0x3FCD600000000000, float 5.625000e-01, float 0x3FC2A00000000000, float 6.875000e-01, float 0x3FB7800000000000, float 7.812500e-01, float 0x3FC2A00000000000, float 6.875000e-01, float 0x3FB7800000000000, float 7.812500e-01, float 0x3FACE00000000000, float 0x3FEB400000000000, float 0x3FA2200000000000, float 0x3FECC00000000000, float 0x3FACE00000000000, float 0x3FEB400000000000, float 0x3FA2200000000000, float 0x3FECC00000000000, float 0x3F95C00000000000, float 0x3FEDE00000000000, float 0x3F8A000000000000, float 0x3FEEA00000000000, float 0x3F95C00000000000, float 0x3FEDE00000000000, float 0x3F8A000000000000, float 0x3FEEA00000000000, float 0x3F7EC00000000000, float 0x3FEF200000000000, float 0x3F74E00000000000, float 0x3FEF600000000000, float 0x3F7EC00000000000, float 0x3FEF200000000000, float 0x3F74E00000000000, float 0x3FEF600000000000, float 0x3F67400000000000, float 0x3FEFA00000000000, float 0.000000e+00, float 1.000000e+00, float 0x3F67400000000000, float 0x3FEFA00000000000, float 0.000000e+00, float 1.000000e+00], align 4

define void @dut(ptr %0, ptr %1, i64 %2, i64 %3, i64 %4, ptr %5, ptr %6, i64 %7, i64 %8, i64 %9) {
  %11 = ptrtoint ptr %1 to i64
  %12 = and i64 %11, 31
  %13 = icmp eq i64 %12, 0
  call void @llvm.assume(i1 %13)
  %14 = ptrtoint ptr %6 to i64
  %15 = and i64 %14, 31
  %16 = icmp eq i64 %15, 0
  call void @llvm.assume(i1 %16)
  br label %17

17:                                               ; preds = %20, %10
  %18 = phi i64 [ %26, %20 ], [ 0, %10 ]
  %19 = icmp slt i64 %18, 1024
  br i1 %19, label %20, label %27

20:                                               ; preds = %17
  %21 = getelementptr bfloat, ptr %1, i64 %18
  %22 = load <16 x bfloat>, ptr %21, align 2
  %23 = call <8 x i64> @_Z10getExpBf16Dv16_u6__bf16(<16 x bfloat> %22)
  %24 = call <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64> %23)
  %25 = getelementptr bfloat, ptr %6, i64 %18
  store <16 x bfloat> %24, ptr %25, align 2
  %26 = add i64 %18, 16
  br label %17

27:                                               ; preds = %17
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write)
declare void @llvm.assume(i1 noundef) #0

; Function Attrs: alwaysinline mustprogress nofree nounwind willreturn memory(read)
define dso_local noundef <8 x i64> @_Z10getExpBf16Dv16_u6__bf16(<16 x bfloat> noundef %0) #1 {
  %2 = tail call noundef <16 x i32> @llvm.aie2.v16int32()
  %3 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 1023)
  %4 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 0)
  %5 = tail call noundef <16 x bfloat> @llvm.aie2.v16bfloat16()
  %6 = tail call noundef <8 x i64> @llvm.aie2.v16accfloat()
  %7 = tail call noundef <16 x i32> @llvm.aie2.v16bf16.to.v16i32(<16 x bfloat> %0, i32 8)
  %8 = tail call noundef <32 x i16> @llvm.aie2.v32int16()
  %9 = bitcast <32 x i16> %8 to <16 x i32>
  %10 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %7, <16 x i32> %9, i32 2)
  %11 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %10, i32 0)
  %12 = bitcast <8 x i32> %11 to <16 x i16>
  %13 = tail call noundef <32 x bfloat> @llvm.aie2.v32bfloat16()
  %14 = tail call noundef <16 x i64> @llvm.aie2.v16acc64()
  %15 = tail call noundef <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16> %12, i32 0, i32 0)
  %16 = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> %15, i32 6, i32 1)
  %17 = zext i20 ptrtoint (ptr @exp_ilut_ab to i20) to i32
  %18 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 %17)
  %19 = zext i20 ptrtoint (ptr @exp_ilut_cd to i20) to i32
  %20 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 %19)
  %21 = tail call noundef <16 x i32> @llvm.aie2.vsel32(<16 x i32> %18, <16 x i32> %20, i32 52428)
  %22 = add <16 x i32> %21, %16
  %23 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %22, i32 0)
  %24 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32> %23), !noalias !3
  %25 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> undef, <8 x i32> %24, i32 0)
  %26 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32> %23), !noalias !3
  %27 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %25, <8 x i32> %26, i32 1)
  %28 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %22, i32 1)
  %29 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32> %28), !noalias !3
  %30 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> undef, <8 x i32> %29, i32 0)
  %31 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32> %28), !noalias !3
  %32 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %30, <8 x i32> %31, i32 1)
  %33 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %27, <16 x i32> %32, i32 24)
  %34 = bitcast <16 x i32> %33 to <32 x bfloat>
  %35 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat> %34, i32 0)
  %36 = tail call noundef <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64> %15, i32 -2, i32 1)
  %37 = and <16 x i32> %36, %3
  %38 = zext i20 ptrtoint (ptr @exp_flut_ab to i20) to i32
  %39 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 %38)
  %40 = zext i20 ptrtoint (ptr @exp_flut_cd to i20) to i32
  %41 = tail call noundef <16 x i32> @llvm.aie2.vbroadcast32.I512(i32 %40)
  %42 = tail call noundef <16 x i32> @llvm.aie2.vsel32(<16 x i32> %39, <16 x i32> %41, i32 52428)
  %43 = add <16 x i32> %42, %37
  %44 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %43, i32 0)
  %45 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32> %44), !noalias !8
  %46 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> undef, <8 x i32> %45, i32 0)
  %47 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32> %44), !noalias !8
  %48 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %46, <8 x i32> %47, i32 1)
  %49 = tail call <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32> %43, i32 1)
  %50 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32> %49), !noalias !8
  %51 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> undef, <8 x i32> %50, i32 0)
  %52 = tail call noundef <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32> %49), !noalias !8
  %53 = tail call <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32> %51, <8 x i32> %52, i32 1)
  %54 = tail call <16 x i32> @llvm.aie2.vshuffle(<16 x i32> %48, <16 x i32> %53, i32 24)
  %55 = bitcast <16 x i32> %54 to <32 x bfloat>
  %56 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat> %55, i32 0)
  %57 = tail call noundef <32 x bfloat> @llvm.aie2.vbroadcast16.bf512(bfloat 0xR0000)
  %58 = tail call <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat> %57, i32 0)
  %59 = tail call <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat> %35, i32 0)
  %60 = tail call <32 x bfloat> @llvm.aie2.upd.bf512.bf256(<32 x bfloat> %59, <16 x bfloat> %58, i32 1)
  %61 = tail call <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat> %56, i32 0)
  %62 = tail call <32 x bfloat> @llvm.aie2.upd.bf512.bf256(<32 x bfloat> %61, <16 x bfloat> %58, i32 1)
  %63 = tail call noundef <8 x i64> @llvm.aie2.bf.mul16.conf(<32 x bfloat> %60, <32 x bfloat> %62, i32 60)
  ret <8 x i64> %63
}

; Function Attrs: nounwind memory(inaccessiblemem: read)
declare <16 x bfloat> @llvm.aie2.v16accfloat.to.v16bf16(<8 x i64>) #2

; Function Attrs: nounwind memory(none)
declare <16 x i32> @llvm.aie2.v16int32() #3

; Function Attrs: nounwind memory(none)
declare <16 x i32> @llvm.aie2.vbroadcast32.I512(i32) #3

; Function Attrs: nounwind memory(none)
declare <16 x bfloat> @llvm.aie2.v16bfloat16() #3

; Function Attrs: nounwind memory(none)
declare <8 x i64> @llvm.aie2.v16accfloat() #3

; Function Attrs: nounwind memory(inaccessiblemem: read)
declare <16 x i32> @llvm.aie2.v16bf16.to.v16i32(<16 x bfloat>, i32) #2

; Function Attrs: nounwind memory(none)
declare <32 x i16> @llvm.aie2.v32int16() #3

; Function Attrs: nounwind memory(none)
declare <16 x i32> @llvm.aie2.vshuffle(<16 x i32>, <16 x i32>, i32) #3

; Function Attrs: nounwind memory(none)
declare <8 x i32> @llvm.aie2.ext.I256.I512(<16 x i32>, i32) #3

; Function Attrs: nounwind memory(none)
declare <32 x bfloat> @llvm.aie2.v32bfloat16() #3

; Function Attrs: nounwind memory(none)
declare <16 x i64> @llvm.aie2.v16acc64() #3

; Function Attrs: nounwind memory(inaccessiblemem: read)
declare <16 x i64> @llvm.aie2.acc64.v16.I256.ups(<16 x i16>, i32, i32) #2

; Function Attrs: nounwind memory(inaccessiblemem: read)
declare <16 x i32> @llvm.aie2.I512.v16.acc64.srs(<16 x i64>, i32, i32) #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <16 x i32> @llvm.aie2.vsel32(<16 x i32>, <16 x i32>, i32) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x16.lo(<8 x i32>) #5

; Function Attrs: nounwind memory(none)
declare <16 x i32> @llvm.aie2.upd.I512.I256(<16 x i32>, <8 x i32>, i32) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(read)
declare <8 x i32> @llvm.aie2.load.4x16.hi(<8 x i32>) #5

; Function Attrs: nounwind memory(none)
declare <16 x bfloat> @llvm.aie2.ext.bf256.bf512(<32 x bfloat>, i32) #3

; Function Attrs: nounwind memory(none)
declare <32 x bfloat> @llvm.aie2.vbroadcast16.bf512(bfloat) #3

; Function Attrs: nounwind memory(none)
declare <32 x bfloat> @llvm.aie2.set.bf512.bf256(<16 x bfloat>, i32) #3

; Function Attrs: nounwind memory(none)
declare <32 x bfloat> @llvm.aie2.upd.bf512.bf256(<32 x bfloat>, <16 x bfloat>, i32) #3

; Function Attrs: nounwind memory(inaccessiblemem: read)
declare <8 x i64> @llvm.aie2.bf.mul16.conf(<32 x bfloat>, <32 x bfloat>, i32) #2

; Function Attrs: alwaysinline mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none)
define dso_local %class.bfloat16 @_Z10getInvBf16f(float noundef %0) local_unnamed_addr #6 {
  %2 = bitcast float %0 to i32
  %3 = add i32 %2, 32768
  %4 = lshr i32 %3, 23
  %5 = lshr i32 %3, 16
  %6 = and i32 %5, 127
  %7 = icmp eq i32 %6, 0
  %8 = zext i1 %7 to i32
  %9 = and i32 %4, 255
  %10 = sub nsw i32 %8, %9
  %11 = shl nsw i32 %10, 7
  %12 = add nsw i32 %11, 32384
  %13 = trunc i32 %6 to i20
  %14 = getelementptr inbounds [128 x i8], ptr @m_inv_lut, i20 0, i20 %13
  %15 = load i8, ptr %14, align 1, !tbaa !13
  %16 = zext i8 %15 to i32
  %17 = add nsw i32 %12, %16
  %18 = trunc i32 %17 to i16
  %19 = bitcast i16 %18 to bfloat
  %20 = insertvalue %class.bfloat16 poison, bfloat %19, 0
  ret %class.bfloat16 %20
}

attributes #0 = { nocallback nofree nosync nounwind willreturn memory(inaccessiblemem: write) }
attributes #1 = { alwaysinline mustprogress nofree nounwind willreturn memory(read) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }
attributes #2 = { nounwind memory(inaccessiblemem: read) }
attributes #3 = { nounwind memory(none) }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(read) }
attributes #6 = { alwaysinline mustprogress nofree norecurse nosync nounwind willreturn memory(read, argmem: none, inaccessiblemem: none) "no-trapping-math"="true" "stack-protector-buffer-size"="8" }

!llvm.linker.options = !{}
!llvm.ident = !{!0, !0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 18.0.0git"}
!1 = !{i32 2, !"Debug Info Version", i32 3}
!2 = !{i32 1, !"wchar_size", i32 4}
!3 = !{!4, !6}
!4 = distinct !{!4, !5, !"_ZN3aie6detail15parallel_lookupItNS0_3lutILj4E8bfloat16S3_EELNS0_14lut_oor_policyE1EE5fetchINS_6vectorItLj16EEELj16EQaaaaleclsrTL0__4sizeELi32EleTL0_0_clsrSA_4sizeEleTL0_0_sr20native_vector_lengthIT0_EE5valueEENS8_IS3_XT0_EEERKT_: argument 0"}
!5 = distinct !{!5, !"_ZN3aie6detail15parallel_lookupItNS0_3lutILj4E8bfloat16S3_EELNS0_14lut_oor_policyE1EE5fetchINS_6vectorItLj16EEELj16EQaaaaleclsrTL0__4sizeELi32EleTL0_0_clsrSA_4sizeEleTL0_0_sr20native_vector_lengthIT0_EE5valueEENS8_IS3_XT0_EEERKT_"}
!6 = distinct !{!6, !7, !"_ZN3aie15parallel_lookupItNS_3lutILj4E8bfloat16S2_EELNS_6detail14lut_oor_policyE1EE5fetchITkNS_6VectorENS_6vectorItLj16EEELj16EEENS8_IS2_XT0_EEERKT_: argument 0"}
!7 = distinct !{!7, !"_ZN3aie15parallel_lookupItNS_3lutILj4E8bfloat16S2_EELNS_6detail14lut_oor_policyE1EE5fetchITkNS_6VectorENS_6vectorItLj16EEELj16EEENS8_IS2_XT0_EEERKT_"}
!8 = !{!9, !11}
!9 = distinct !{!9, !10, !"_ZN3aie6detail15parallel_lookupItNS0_3lutILj4E8bfloat16S3_EELNS0_14lut_oor_policyE1EE5fetchINS_6vectorItLj16EEELj16EQaaaaleclsrTL0__4sizeELi32EleTL0_0_clsrSA_4sizeEleTL0_0_sr20native_vector_lengthIT0_EE5valueEENS8_IS3_XT0_EEERKT_: argument 0"}
!10 = distinct !{!10, !"_ZN3aie6detail15parallel_lookupItNS0_3lutILj4E8bfloat16S3_EELNS0_14lut_oor_policyE1EE5fetchINS_6vectorItLj16EEELj16EQaaaaleclsrTL0__4sizeELi32EleTL0_0_clsrSA_4sizeEleTL0_0_sr20native_vector_lengthIT0_EE5valueEENS8_IS3_XT0_EEERKT_"}
!11 = distinct !{!11, !12, !"_ZN3aie15parallel_lookupItNS_3lutILj4E8bfloat16S2_EELNS_6detail14lut_oor_policyE1EE5fetchITkNS_6VectorENS_6vectorItLj16EEELj16EEENS8_IS2_XT0_EEERKT_: argument 0"}
!12 = distinct !{!12, !"_ZN3aie15parallel_lookupItNS_3lutILj4E8bfloat16S2_EELNS_6detail14lut_oor_policyE1EE5fetchITkNS_6VectorENS_6vectorItLj16EEELj16EEENS8_IS2_XT0_EEERKT_"}
!13 = !{!14, !14, i64 0}
!14 = !{!"omnipotent char", !15, i64 0}
!15 = !{!"Simple C++ TBAA"}
